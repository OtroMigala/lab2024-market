package co.com.hyunseda.market.presentation;

import java.awt.FlowLayout;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;

import javax.swing.DefaultComboBoxModel;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import co.com.hyunseda.market.service.Category;
import co.com.hyunseda.market.service.CategoryService;
import co.com.hyunseda.market.service.Product;
import co.com.hyunseda.market.service.ProductService;

/**
 *
 * @author Libardo Pantoja, Julio A. Hurtado
 */
public class GUIProducts extends javax.swing.JFrame {

    private ProductService productService;
    private CategoryService categoryService;
    private boolean addOption;

    /**
     * Creates new form GUIProducts
     */
    
    public GUIProducts(ProductService productService, CategoryService categoryService) {
        initComponents();
        this.productService = productService;
        this.categoryService = categoryService;
        stateInitial();
        loadCategories();
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("checkstyle:linelength")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
    setTitle("Productos");

    JPanel mainPanel = new JPanel(new GridBagLayout());
    GridBagConstraints gbc = new GridBagConstraints();
    gbc.insets = new Insets(5, 5, 5, 5);

    // ID
    gbc.gridx = 0;
    gbc.gridy = 0;
    gbc.anchor = GridBagConstraints.EAST;
    mainPanel.add(new JLabel("*Id:"), gbc);

    gbc.gridx = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.weightx = 1.0;
    txtId = new JTextField(20);
    mainPanel.add(txtId, gbc);

    // Nombre
    gbc.gridx = 0;
    gbc.gridy = 1;
    gbc.fill = GridBagConstraints.NONE;
    gbc.weightx = 0;
    mainPanel.add(new JLabel("*Nombre:"), gbc);

    gbc.gridx = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.weightx = 1.0;
    txtName = new JTextField(20);
    mainPanel.add(txtName, gbc);

    // Descripción
    gbc.gridx = 0;
    gbc.gridy = 2;
    gbc.fill = GridBagConstraints.NONE;
    gbc.weightx = 0;
    mainPanel.add(new JLabel("Descripción:"), gbc);

    gbc.gridx = 1;
    gbc.fill = GridBagConstraints.BOTH;
    gbc.weightx = 1.0;
    gbc.weighty = 1.0;
    txtDescription = new JTextArea(5, 20);
    JScrollPane scrollPane = new JScrollPane(txtDescription);
    mainPanel.add(scrollPane, gbc);

    // Categoría
    gbc.gridx = 0;
    gbc.gridy = 3;
    gbc.fill = GridBagConstraints.NONE;
    gbc.weightx = 0;
    gbc.weighty = 0;
    mainPanel.add(new JLabel("Categoría:"), gbc);

    gbc.gridx = 1;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.weightx = 1.0;
    cmbCategory = new JComboBox<>();
    mainPanel.add(cmbCategory, gbc);

    // Panel de botones
    JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER, 10, 10));
    buttonPanel.add(btnNuevo = new JButton("Nuevo"));
    buttonPanel.add(btnEditar = new JButton("Editar"));
    buttonPanel.add(btnSave = new JButton("Grabar"));
    buttonPanel.add(btnCancelar = new JButton("Cancelar"));
    buttonPanel.add(btnEliminar = new JButton("Eliminar"));
    buttonPanel.add(btnFind = new JButton("Buscar"));
    buttonPanel.add(btnCerrar = new JButton("Cerrar"));
    JButton btnManageCategories = new JButton("Gestionar Categorías");
    buttonPanel.add(btnManageCategories);

    gbc.gridx = 0;
    gbc.gridy = 4;
    gbc.gridwidth = 2;
    gbc.fill = GridBagConstraints.HORIZONTAL;
    gbc.weightx = 1.0;
    gbc.weighty = 0;
    mainPanel.add(buttonPanel, gbc);

    getContentPane().add(mainPanel);
    pack();
    setLocationRelativeTo(null);

    // Añadir los ActionListeners a los botones
    btnNuevo.addActionListener(evt -> btnNuevoActionPerformed(evt));
    btnEditar.addActionListener(evt -> btnEditarActionPerformed(evt));
    btnSave.addActionListener(evt -> btnSaveActionPerformed(evt));
    btnCancelar.addActionListener(evt -> btnCancelarActionPerformed(evt));
    btnEliminar.addActionListener(evt -> btnEliminarActionPerformed(evt));
    btnFind.addActionListener(evt -> btnFindActionPerformed(evt));
    btnCerrar.addActionListener(evt -> btnCerrarActionPerformed(evt));
    txtId.addFocusListener(new java.awt.event.FocusAdapter() {
        public void focusLost(java.awt.event.FocusEvent evt) {

            txtIdFocusLost(evt);
        }
    });
    btnManageCategories.addActionListener(evt -> btnManageCategoriesActionPerformed(evt));
}
    private void btnNuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnNuevoActionPerformed
        stateNew();
        txtName.requestFocus();
        addOption = true;
    }//GEN-LAST:event_btnNuevoActionPerformed
    private void btnCancelarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelarActionPerformed
        stateInitial();
        cleanControls();
    }//GEN-LAST:event_btnCancelarActionPerformed
    private void btnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCerrarActionPerformed
        this.dispose();
    }//GEN-LAST:event_btnCerrarActionPerformed
    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {
        if (txtName.getText().trim().isEmpty()) {
            Messages.showMessageDialog("Debe ingresar el nombre del producto", "Atención");
            txtName.requestFocus();
            return;
        }
        
        if (cmbCategory.getSelectedItem() == null) {
            Messages.showMessageDialog("Debe seleccionar una categoría", "Atención");
            cmbCategory.requestFocus();
            return;
        }

        if (addOption) {
            addProduct();
        } else {
            editProduct();
        }
    }//GEN-LAST:event_btnSaveActionPerformed
    private void loadCategories() {
        DefaultComboBoxModel<Category> model = new DefaultComboBoxModel<>();
        for (Category category : categoryService.findAllCategories()) {
            model.addElement(category);
        }
        cmbCategory.setModel(model);
    }
    private void btnEditarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarActionPerformed
        addOption = false;
        stateEdit();
        txtId.requestFocus();
    }//GEN-LAST:event_btnEditarActionPerformed
    private void txtIdFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtIdFocusLost
        if (txtId.getText().trim().equals("")) {
            return;
        }
        Long productId = Long.parseLong(txtId.getText());
        Product prod = productService.findProductById(productId);
        if (prod == null) {
            Messages.showMessageDialog("El identificador del producto no existe", "Error");
            txtId.setText("");
            txtId.requestFocus();
        } else {
            txtName.setText(prod.getName());
            txtDescription.setText(prod.getDescription());
        }
    }//GEN-LAST:event_txtIdFocusLost
    private void btnEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEliminarActionPerformed
        String id = txtId.getText().trim();
        if (id.equals("")) {
            Messages.showMessageDialog("Debe buscar el producto a eliminar", "Atención");
            txtId.requestFocus();
            return;
        }
        Long productId = Long.parseLong(id);
        if (Messages.showConfirmDialog("Está seguro que desea eliminar este producto?", "Confirmación") == JOptionPane.YES_NO_OPTION) {
            if (productService.deleteProduct(productId)) {
                Messages.showMessageDialog("Producto eliminado con éxito", "Atención");
                stateInitial();
                cleanControls();
            }
        }
    }//GEN-LAST:event_btnEliminarActionPerformed
    private void btnFindActionPerformed(java.awt.event.ActionEvent evt) {
        GUIProductsFind instance = new GUIProductsFind(this, true, productService, categoryService);
        instance.setVisible(true);
    }  //GEN-LAST:event_btnFindActionPerformed
    private void stateEdit() {
        btnNuevo.setVisible(false);
        btnEditar.setVisible(false);
        btnEliminar.setVisible(true);
        btnCancelar.setVisible(true);
        btnCerrar.setVisible(false);
        btnSave.setVisible(true);
        btnFind.setVisible(false);
        txtId.setEnabled(true);
        txtName.setEnabled(true);
        txtDescription.setEnabled(true);
    }
    private void btnManageCategoriesActionPerformed(java.awt.event.ActionEvent evt) {
        System.out.println("Botón Gestionar Categorías presionado");
        GUICategories categoriesDialog = new GUICategories(this, categoryService);
        categoriesDialog.setVisible(true);
        System.out.println("Diálogo de categorías cerrado");
        loadCategories();
        System.out.println("Categorías recargadas");
    }
    private void stateInitial() {
        btnNuevo.setVisible(true);
        btnEditar.setVisible(true);
        btnEliminar.setVisible(false);
        btnCancelar.setVisible(false);
        btnCerrar.setVisible(true);
        btnSave.setVisible(false);
        btnFind.setVisible(true);
        txtId.setEnabled(false);
        txtName.setEnabled(false);
        txtDescription.setEnabled(false);

    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancelar;
    private javax.swing.JButton btnCerrar;
    private javax.swing.JButton btnEditar;
    private javax.swing.JButton btnEliminar;
    private javax.swing.JButton btnFind;
    private javax.swing.JButton btnNuevo;
    private javax.swing.JButton btnSave;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel1;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel2;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel3;
    @SuppressWarnings("unused")
    private javax.swing.JScrollPane jScrollPane1;
    @SuppressWarnings("unused")
    private javax.swing.JPanel pnlCenter;
    @SuppressWarnings("unused")
    private javax.swing.JPanel pnlSouth;
    private javax.swing.JTextArea txtDescription;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtName;
    private javax.swing.JComboBox<Category> cmbCategory;
    @SuppressWarnings("unused")
    private javax.swing.JLabel jLabel4;
    // End of variables declaration//GEN-END:variables
    private void stateNew() {
        btnNuevo.setVisible(false);
        btnEditar.setVisible(false);
        btnEliminar.setVisible(false);
        btnCancelar.setVisible(true);
        btnCerrar.setVisible(false);
        btnSave.setVisible(true);
        btnFind.setVisible(false);
        txtId.setEnabled(false);
        txtName.setEnabled(true);
        txtDescription.setEnabled(true);

    }
    private void cleanControls() {
        txtId.setText("");
        txtName.setText("");
        txtDescription.setText("");
    }
    private void addProduct() {
        String name = txtName.getText().trim();
        String description = txtDescription.getText().trim();
        Category selectedCategory = (Category) cmbCategory.getSelectedItem();
        Long categoryId = selectedCategory != null ? selectedCategory.getCategoryId() : null;
    
        if (productService.saveProduct(name, description, categoryId)) {
            Messages.showMessageDialog("Se grabó con éxito", "Atención");
            cleanControls();
            stateInitial();
        } else {
            Messages.showMessageDialog("Error al grabar, lo siento mucho", "Atención");
        }
    }
    private void editProduct() {
        String id = txtId.getText().trim();
        if (id.isEmpty()) {
            Messages.showMessageDialog("Debe buscar el producto a editar", "Atención");
            txtId.requestFocus();
            return;
        }
        Long productId = Long.parseLong(id);
        String name = txtName.getText().trim();
        String description = txtDescription.getText().trim();
        Category selectedCategory = (Category) cmbCategory.getSelectedItem();

        Product prod = new Product();
        prod.setName(name);
        prod.setDescription(description);
        prod.setCategoryId(selectedCategory.getCategoryId());

        if (productService.editProduct(productId, prod)) {
            Messages.showMessageDialog("Se editó con éxito", "Atención");
            cleanControls();
            stateInitial();
        } else {
            Messages.showMessageDialog("Error al editar, lo siento mucho", "Atención");
        }
    }

    //Sección de Categorías

    
}
